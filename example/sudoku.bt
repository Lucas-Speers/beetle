func main() {
    // let board = [
    //     "5___1___4",
    //     "274___6__",
    //     "_8_9_4___",
    //     "81_46_3_2",
    //     "__2_3_1__",
    //     "7_6_91_58",
    //     "___5_3_1_",
    //     "__5___927",
    //     "1___2___3",
    // ];

    let board = [
        "__814_9_2",
        "_2_673___",
        "_612__374",
        "19__24_53",
        "7______1_",
        "_32____9_",
        "__738_6_9",
        "9__7__5_1",
        "61_____2_",
    ];

    // let board = [
    //     "___1_2___",
    //     "_6_____7_",
    //     "__8___9__",
    //     "4_______3",
    //     "_5___7___",
    //     "2___8___1",
    //     "__9___8_5",
    //     "_7_____6_",
    //     "___3_4___",
    // ];

    let board = compile_board(board);
    reduce_board(board);
    guess_one(board);
}

func print_board(board) {
    for row in board {
        for item in row {
            if (type(item) == type([])) {printsl("_");}
            else {printsl(item);}
        }
        print();
    }
    print();
}

func compile_board(board) {
    let output = [];
    for row in range(9) {
        let new_row = [];
        for char in range(9) {
            if (board[row][char] == '_') {
                push(new_row, [1,2,3,4,5,6,7,8,9]);
            }
            else {
                push(new_row, int(board[row][char]));
            }
        }
        push(output, new_row);
    }
    return output;
}

func reduce_board(board) {
    let Int = type(0);
    let List = type([]);

    for i in range(9) {
        // get a list of current numbers
        let taken = [];
        for j in range(9) {
            if (type(board[i][j]) == Int) {
                push(taken, board[i][j]);
            }
        }
        // remove incorrect posibilities
        for j in range(9) {
            if (type(board[i][j]) == List) {
                let new_posibilities = [];
                for posibility in range(len(board[i][j])) {
                    if (contains(taken, board[i][j][posibility]) == false) {
                        push(new_posibilities, board[i][j][posibility]);
                    }
                }
                board[i][j] = new_posibilities;
                if (len(board[i][j]) == 1) {
                    board[i][j] = board[i][j][0];
                }
            }
        }
    }

    let taken = [[],[],[],[],[],[],[],[],[]];
    for i in range(9) {
        // get a list of current numbers
        for j in range(9) {
            if (type(board[i][j]) == Int) {
                push(taken[j], board[i][j]);
            }
        }
        // remove incorrect posibilities
        for j in range(9) {
            if (type(board[i][j]) == List) {
                let new_posibilities = [];
                for posibility in range(len(board[i][j])) {
                    if (contains(taken[j], board[i][j][posibility]) == false) {
                        push(new_posibilities, board[i][j][posibility]);
                    }
                }
                board[i][j] = new_posibilities;
                if (len(board[i][j]) == 1) {
                    board[i][j] = board[i][j][0];
                }
            }
        }
    }
}

func guess_one(board) {
    let Int = type(0);

    let has_space = false;
    for y in range(9) {
        for x in range(9) {
            if (type(board[y][x]) == Int) {continue;}
            if (len(board[y][x]) == 0) {return none;}
            has_space = true;
            for i in board[y][x] {
                let new_board = copy(board);
                new_board[y][x] = i;
                reduce_board(new_board);
                if (test_sudoku(new_board)) {
                    // print_board(new_board);
                    guess_one(new_board);
                }
            }
            return none;
        }
    }
    if (has_space == false) {
        print(board);
        exit();
    }
}

// returns false if it does not follow the rules of sudoku, and true if it does
func test_sudoku(board) {
    let List = type([]);

    for y in range(9) {
        let x_list = [];
        for x in range(9) {
            if (type(board[y][x]) == List) {continue;}
            if (contains(x_list, board[y][x])) {return false;}
            push(x_list, board[y][x]);
        }
    }
    for y in range(9) {
        let y_list = [];
        for x in range(9) {
            if (type(board[x][y]) == List) {continue;}
            if (contains(y_list, board[x][y])) {return false;}
            push(y_list, board[x][y]);
        }
    }
    for block_x in [0,3,6] {
        for block_y in [0,3,6] {
            let list = [];
            for x in [0,1,2] {
                for y in [0,1,2] {
                    if (type(board[block_y+y][block_x+x]) == List) {continue;}
                    if (contains(list, board[block_y+y][block_x+x])) {return false;}
                    push(list, board[block_y+y][block_x+x]);
                }
            }
        }
    }

    return true;
}